"formatcjs";
ifs_1:{
options={
conditionals:true
};
input:{
if(foo)bar();
if(!foo);elsebar();
if(foo);elsebar();
if(foo);else;
}
expect:{
foo&&bar();
foo&&bar();
foo||bar();
foo;
}
}

ifs_2:{
options={
conditionals:true
};
input:{
if(foo){
x();
}elseif(bar){
y();
}elseif(baz){
z();
}

if(foo){
x();
}elseif(bar){
y();
}elseif(baz){
z();
}else{
t();
}
}
expect:{
foo?x():bar?y():baz&&z();
foo?x():bar?y():baz?z():t();
}
}

ifs_3_should_warn:{
options={
conditionals:true,
dead_code:true,
evaluate:true,
booleans:true
};
input:{
if(x&&!(x+"1")&&y){//1
varqq;
foo();
}else{
bar();
}

if(x||!!(x+"1")||y){//2
foo();
}else{
varjj;
bar();
}
}
expect:{
varqq;bar();//1
varjj;foo();//2
}
}

ifs_4:{
options={
conditionals:true
};
input:{
if(foo&&bar){
x(foo)[10].bar.baz=something();
}else
x(foo)[10].bar.baz=something_else();
}
expect:{
x(foo)[10].bar.baz=(foo&&bar)?something():something_else();
}
}

ifs_5:{
options={
if_return:true,
conditionals:true,
comparisons:true,
};
input:{
functionf(){
if(foo)return;
bar();
baz();
}
functiong(){
if(foo)return;
if(bar)return;
if(baz)return;
if(baa)return;
a();
b();
}
}
expect:{
functionf(){
if(!foo){
bar();
baz();
}
}
functiong(){
if(!(foo||bar||baz||baa)){
a();
b();
}
}
}
}

ifs_6:{
options={
conditionals:true,
comparisons:true
};
input:{
if(!foo&&!bar&&!baz&&!boo){
x=10;
}else{
x=20;
}
}
expect:{
x=foo||bar||baz||boo?20:10;
}
}
